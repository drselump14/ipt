# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/protobuf-cucumber/all/protobuf-cucumber.rbi
#
# protobuf-cucumber-3.10.8

module Protobuf
  def self.after_server_bind(&block); end
  def self.before_server_bind(&block); end
  def self.client_host; end
  def self.client_host=(arg0); end
  def self.connector_type_class; end
  def self.connector_type_class=(type_class); end
  def self.deprecator; end
  def self.field_deprecator; end
  def self.gc_pause_server_request=(value); end
  def self.gc_pause_server_request?; end
  def self.ignore_unknown_fields=(value); end
  def self.ignore_unknown_fields?; end
  def self.print_deprecation_warnings=(value); end
  def self.print_deprecation_warnings?; end
end
module Protobuf::WireType
end
module Protobuf::VarintPure
  def cached_varint(value); end
  def decode(stream); end
  def encode(value, use_cache = nil); end
end
class Protobuf::Varint
  extend Protobuf::VarintPure
end
class Protobuf::Error < StandardError
end
class Protobuf::InvalidWireType < Protobuf::Error
end
class Protobuf::NotInitializedError < Protobuf::Error
end
class Protobuf::TagCollisionError < Protobuf::Error
end
class Protobuf::SerializationError < StandardError
end
class Protobuf::FieldNotDefinedError < StandardError
end
class Protobuf::DuplicateFieldNameError < StandardError
end
class Protobuf::DeprecationBase < ActiveSupport::Deprecation
  def self.deprecate_methods(**, &&); end
  def self.deprecation_warning(**, &&); end
end
class Protobuf::Deprecation < Protobuf::DeprecationBase
  def self.define_deprecated_methods(**, &&); end
end
class Protobuf::FieldDeprecation < Protobuf::DeprecationBase
  def self.deprecate_method(**, &&); end
  def self.deprecated_method_warning(**, &&); end
end
module Protobuf::Logging
  def log_exception(ex); end
  def log_signature; end
  def logger; end
  def self.initialize_logger(log_target = nil, log_level = nil); end
  def self.logger; end
  def self.logger=(arg0); end
  def sign_message(message); end
end
class Protobuf::Encoder
  def self.encode(message, stream); end
end
class Protobuf::Decoder
  def self.decode_each_field(stream); end
end
module Protobuf::Optionable
  def get_option!(name); end
  def get_option(name); end
  def self.inject(base_class, extend_class = nil, &block); end
end
module Protobuf::Optionable::ClassMethods
  def get_option!(name); end
  def get_option(name); end
  def set_option(name, value = nil); end
end
module Protobuf::Field
  def self.build(message_class, rule, type, name, tag, simple_name, options = nil); end
  def self.field_class(type); end
  def self.field_type(type); end
end
class Protobuf::Field::FieldArray < Array
  def <<(val); end
  def []=(nth, val); end
  def field; end
  def initialize(field); end
  def normalize(value); end
  def push(val); end
  def raise_type_error(val); end
  def replace(val); end
  def to_hash_value; end
  def to_json_hash_value(options = nil); end
  def to_s; end
  def unshift(val); end
end
class Protobuf::Field::FieldHash < Hash
  def []=(key, val); end
  def fetch_enum(type, val); end
  def field; end
  def initialize(field); end
  def key_field; end
  def merge!(other); end
  def normalize(what, value, normalize_field); end
  def normalize_key(key); end
  def normalize_val(value); end
  def raise_type_error(val); end
  def replace(val); end
  def store(key, val); end
  def to_hash_value; end
  def to_json_hash_value(options = nil); end
  def to_s; end
  def update(other); end
  def value_field; end
end
module Protobuf::Field::BaseFieldObjectDefinitions
end
class Protobuf::Field::BaseFieldObjectDefinitions::ToHashValueToMessageHashWithStringKey
  def call(values, result); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseToMessageHashWithStringKey
  def call(values, result); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::ToHashValueToMessageHash
  def call(values, result); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseToMessageHash
  def call(values, result); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedPackedEncodeToStream
  def call(value, stream); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BytesEncodeToStream
  def call(value, stream); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::StringEncodeToStream
  def call(value, stream); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseEncodeToStream
  def call(value, stream); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedNotPackedEncodeToStream
  def call(value, stream); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseSetMethod
  def call(message_instance, bytes); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::MapSetMethod
  def call(message_instance, bytes); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedNotPackedSetMethod
  def call(message_instance, bytes); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedPackedSetMethod
  def call(message_instance, bytes); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RequiredMapSetField
  def call(values, value, _ignore_nil_for_repeated, message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::MapSetField
  def call(values, value, _ignore_nil_for_repeated, _message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RequiredRepeatedSetField
  def call(values, value, ignore_nil_for_repeated, message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedSetField
  def call(values, value, ignore_nil_for_repeated, _message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RequiredStringSetField
  def call(values, value, _ignore_nil_for_repeated, message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::StringSetField
  def call(values, value, _ignore_nil_for_repeated, _message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RequiredBaseSetField
  def call(values, value, _ignore_nil_for_repeated, message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseSetField
  def call(values, value, _ignore_nil_for_repeated, _message_instance); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseFieldAndPresentPredicate
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BoolFieldAndPresentPredicate
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseFieldPredicate
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedFieldPredicate
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BoolFieldValueFromValues
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BoolFieldValueFromValuesForSerialization
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseFieldValueFromValues
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::BaseFieldValueFromValuesForSerialization
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::MapValueFromValues
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::MapValueFromValuesForSerialization
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedFieldValueFromValues
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseFieldObjectDefinitions::RepeatedFieldValueFromValuesForSerialization
  def call(values); end
  def initialize(selph); end
end
class Protobuf::Field::BaseField
  def acceptable?(_value); end
  def coerce!(value); end
  def decode(_bytes); end
  def default; end
  def default_value; end
  def define_accessor(simple_field_name, fully_qualified_field_name); end
  def define_encode_to_stream!; end
  def define_field_and_present_predicate!; end
  def define_field_predicate!; end
  def define_set_field!; end
  def define_set_method!; end
  def define_to_message_hash!; end
  def define_value_from_values!; end
  def define_value_from_values_for_serialization!; end
  def deprecated?; end
  def encode(_value); end
  def encode_to_stream(value, stream); end
  def enum?; end
  def extension?; end
  def field?(values); end
  def field_and_present?(values); end
  def fully_qualified_name; end
  def fully_qualified_name_only!; end
  def initialize(message_class, rule, type_class, fully_qualified_name, tag, simple_name, options); end
  def map?; end
  def message?; end
  def message_class; end
  def name; end
  def optionable_descriptor_class; end
  def optional?; end
  def options; end
  def packed?; end
  def repeated?; end
  def repeated_message?; end
  def required?; end
  def rule; end
  def self.default; end
  def set(message_instance, bytes); end
  def set_default_value!; end
  def set_field(values, value, ignore_nil_for_repeated, message_instance); end
  def set_map!; end
  def set_repeated_message!; end
  def tag; end
  def tag_encoded; end
  def to_message_hash(values, result); end
  def to_message_hash_with_string_key(values, result); end
  def to_s; end
  def type(*args, &block); end
  def type_class; end
  def typed_default_value; end
  def validate_packed_field; end
  def value_from_values(values); end
  def value_from_values_for_serialization(values); end
  def wire_type; end
  include Protobuf::Logging
  include Protobuf::Optionable::ClassMethods
end
class Protobuf::Field::BytesField < Protobuf::Field::BaseField
  def acceptable?(val); end
  def coerce!(value); end
  def decode(bytes); end
  def encode(value); end
  def json_encode(value, options = nil); end
  def self.default; end
  def wire_type; end
end
class Protobuf::Field::FloatField < Protobuf::Field::BaseField
  def acceptable?(val); end
  def coerce!(val); end
  def decode(bytes); end
  def encode(value); end
  def self.default; end
  def wire_type; end
end
class Protobuf::Field::MessageField < Protobuf::Field::BaseField
  def acceptable?(val); end
  def coerce!(value); end
  def decode(bytes); end
  def encode(value); end
  def message?; end
  def wire_type; end
end
class Protobuf::Field::VarintField < Protobuf::Field::BaseField
  def acceptable?(val); end
  def coerce!(val); end
  def decode(value); end
  def encode(value); end
  def self.default; end
  def self.encode(value); end
  def wire_type; end
end
class Protobuf::Field::StringField < Protobuf::Field::BytesField
  def acceptable?(val); end
  def coerce!(value); end
  def decode(bytes); end
  def encode(value); end
  def json_encode(value, options = nil); end
end
class Protobuf::Field::DoubleField < Protobuf::Field::FloatField
  def decode(bytes); end
  def encode(value); end
  def wire_type; end
end
class Protobuf::Field::IntegerField < Protobuf::Field::VarintField
  def decode(value); end
  def encode(value); end
end
class Protobuf::Field::EnumField < Protobuf::Field::IntegerField
  def acceptable?(val); end
  def coerce!(value); end
  def decode(value); end
  def encode(value); end
  def enum?; end
  def json_encode(value, options = nil); end
  def self.default; end
  def typed_default_value; end
end
class Protobuf::Field::SignedIntegerField < Protobuf::Field::VarintField
  def decode(value); end
  def encode(value); end
end
class Protobuf::Field::Uint32Field < Protobuf::Field::VarintField
  def self.max; end
  def self.min; end
end
class Protobuf::Field::Uint64Field < Protobuf::Field::VarintField
  def json_encode(value, options = nil); end
  def self.max; end
  def self.min; end
end
class Protobuf::Field::Int32Field < Protobuf::Field::IntegerField
  def self.max; end
  def self.min; end
end
class Protobuf::Field::Int64Field < Protobuf::Field::IntegerField
  def acceptable?(val); end
  def json_encode(value, options = nil); end
  def self.max; end
  def self.min; end
end
class Protobuf::Field::Sint32Field < Protobuf::Field::SignedIntegerField
  def self.max; end
  def self.min; end
end
class Protobuf::Field::Sint64Field < Protobuf::Field::SignedIntegerField
  def json_encode(value, options = nil); end
  def self.max; end
  def self.min; end
end
class Protobuf::Field::BoolField < Protobuf::Field::VarintField
  def acceptable?(val); end
  def coerce!(val); end
  def decode(value); end
  def define_accessor(simple_field_name, _fully_qualified_field_name); end
  def encode(value); end
  def self.default; end
end
class Protobuf::Field::Sfixed32Field < Protobuf::Field::Int32Field
  def decode(bytes); end
  def encode(value); end
  def wire_type; end
end
class Protobuf::Field::Sfixed64Field < Protobuf::Field::Int64Field
  def decode(bytes); end
  def encode(value); end
  def wire_type; end
end
class Protobuf::Field::Fixed32Field < Protobuf::Field::Uint32Field
  def decode(bytes); end
  def encode(value); end
  def wire_type; end
end
class Protobuf::Field::Fixed64Field < Protobuf::Field::Uint64Field
  def decode(bytes); end
  def encode(value); end
  def wire_type; end
end
class Numeric
  def value(*args, &block); end
end
class Protobuf::Enum < SimpleDelegator
  def ==(other); end
  def class; end
  def eql?(other); end
  def initialize(parent_class, name, tag); end
  def inspect; end
  def name; end
  def name=(arg0); end
  def parent_class; end
  def parent_class=(arg0); end
  def self.aliases_allowed?; end
  def self.all_tags; end
  def self.define(name, tag); end
  def self.enum_by_value(*args, &block); end
  def self.enum_for_name(name); end
  def self.enum_for_tag(tag); end
  def self.enum_for_tag_integer(tag); end
  def self.enums; end
  def self.enums_for_tag(tag); end
  def self.fetch(candidate); end
  def self.get_name_by_tag(*args, &block); end
  def self.mapped_enums; end
  def self.name_by_value(*args, &block); end
  def self.name_for_tag(tag); end
  def self.optionable_descriptor_class; end
  def self.valid_tag?(tag); end
  def self.value_by_name(*args, &block); end
  def self.values(*args, &block); end
  def tag; end
  def tag=(arg0); end
  def to_hash_value; end
  def to_i; end
  def to_int; end
  def to_json(*arg0); end
  def to_json_hash_value; end
  def to_s(format = nil); end
  def try(*args, &block); end
  def value(*args, &block); end
  extend Protobuf::Optionable::ClassMethods
  include Protobuf::Optionable
end
class Protobuf::Message
  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def clear!; end
  def clone; end
  def copy_to(object, method); end
  def dup; end
  def each_field; end
  def each_field_for_serialization; end
  def field?(name); end
  def has_field?(*args, &block); end
  def initialize(fields = nil); end
  def inspect; end
  def respond_to_and_has?(name); end
  def respond_to_and_has_and_present?(key); end
  def respond_to_and_has_present?(key); end
  def respond_to_has?(name); end
  def respond_to_has_and_present?(key); end
  def respond_to_has_present?(key); end
  def responds_to_and_has?(name); end
  def responds_to_and_has_and_present?(key); end
  def responds_to_and_has_present?(key); end
  def responds_to_has?(name); end
  def responds_to_has_present?(key); end
  def self.from_json(json); end
  def self.get_ext_field_by_name(*args, &block); end
  def self.get_ext_field_by_tag(*args, &block); end
  def self.get_field_by_name(*args, &block); end
  def self.get_field_by_tag(*args, &block); end
  def self.normalize_json(ob); end
  def self.optionable_descriptor_class; end
  def self.to_json; end
  def set_field(name, value, ignore_nil_for_repeated, field = nil); end
  def to_hash; end
  def to_hash_value; end
  def to_hash_with_string_keys; end
  def to_json(options = nil); end
  def to_json_hash(options = nil); end
  def to_json_hash_value(options = nil); end
  def to_proto; end
  def to_proto_hash; end
  extend Protobuf::Message::Fields
  extend Protobuf::Message::Fields::ClassMethods
  extend Protobuf::Message::Serialization::ClassMethods
  extend Protobuf::Optionable::ClassMethods
  include Protobuf::Message::Serialization
  include Protobuf::Optionable
end
module Protobuf::Message::Fields
  def self.extended(other); end
end
module Protobuf::Message::Fields::ClassMethods
  def all_fields; end
  def define_field(rule, type_class, fully_qualified_field_name, tag, options); end
  def extension_fields; end
  def extension_ranges; end
  def extension_tag?(tag); end
  def extensions(range); end
  def field_store; end
  def field_tag?(tag, allow_extension = nil); end
  def fields; end
  def get_extension_field(name_or_tag); end
  def get_field(name_or_tag, allow_extension = nil); end
  def inherit_fields!(subclass); end
  def inherited(subclass); end
  def map(key_type_class, value_type_class, name, tag, options = nil); end
  def optional(type_class, name, tag, options = nil); end
  def raise_if_name_collision(field_name); end
  def raise_if_tag_collision(tag, field_name); end
  def remove_existing_accessors(accessor); end
  def repeated(type_class, name, tag, options = nil); end
  def required(type_class, name, tag, options = nil); end
  def required_field_tags; end
end
module Protobuf::Message::Serialization
  def bytes; end
  def decode(bytes); end
  def decode_from(stream); end
  def deserialize(bytes); end
  def deserialize_from(stream); end
  def encode; end
  def encode_to(stream); end
  def parse_from(stream); end
  def parse_from_string(bytes); end
  def self.included(other); end
  def serialize; end
  def serialize_to(stream); end
  def serialize_to_string; end
  def set_field_bytes(tag, bytes); end
  def to_s; end
end
module Protobuf::Message::Serialization::ClassMethods
  def decode(bytes); end
  def decode_from(stream); end
  def encode(fields = nil); end
end
module Google
end
module Google::Protobuf
  def self.optionable_descriptor_class; end
  extend Protobuf::Optionable::ClassMethods
  include Protobuf::Optionable
end
class Google::Protobuf::FileDescriptorSet < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def file!; end
  def file; end
  def file=(v); end
end
class Google::Protobuf::FileDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def dependency!; end
  def dependency; end
  def dependency=(v); end
  def enum_type!; end
  def enum_type; end
  def enum_type=(v); end
  def extension!; end
  def extension; end
  def extension=(v); end
  def message_type!; end
  def message_type; end
  def message_type=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def options!; end
  def options; end
  def options=(v); end
  def package!; end
  def package; end
  def package=(v); end
  def public_dependency!; end
  def public_dependency; end
  def public_dependency=(v); end
  def service!; end
  def service; end
  def service=(v); end
  def source_code_info!; end
  def source_code_info; end
  def source_code_info=(v); end
  def syntax!; end
  def syntax; end
  def syntax=(v); end
  def weak_dependency!; end
  def weak_dependency; end
  def weak_dependency=(v); end
end
class Google::Protobuf::DescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def enum_type!; end
  def enum_type; end
  def enum_type=(v); end
  def extension!; end
  def extension; end
  def extension=(v); end
  def extension_range!; end
  def extension_range; end
  def extension_range=(v); end
  def field!; end
  def field; end
  def field=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def nested_type!; end
  def nested_type; end
  def nested_type=(v); end
  def oneof_decl!; end
  def oneof_decl; end
  def oneof_decl=(v); end
  def options!; end
  def options; end
  def options=(v); end
  def reserved_name!; end
  def reserved_name; end
  def reserved_name=(v); end
  def reserved_range!; end
  def reserved_range; end
  def reserved_range=(v); end
end
class Google::Protobuf::DescriptorProto::ExtensionRange < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def end!; end
  def end; end
  def end=(v); end
  def start!; end
  def start; end
  def start=(v); end
end
class Google::Protobuf::DescriptorProto::ReservedRange < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def end!; end
  def end; end
  def end=(v); end
  def start!; end
  def start; end
  def start=(v); end
end
class Google::Protobuf::FieldDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def default_value!; end
  def default_value; end
  def default_value=(v); end
  def extendee!; end
  def extendee; end
  def extendee=(v); end
  def json_name!; end
  def json_name; end
  def json_name=(v); end
  def label!; end
  def label; end
  def label=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def number!; end
  def number; end
  def number=(v); end
  def oneof_index!; end
  def oneof_index; end
  def oneof_index=(v); end
  def options!; end
  def options; end
  def options=(v); end
  def type!; end
  def type; end
  def type=(v); end
  def type_name!; end
  def type_name; end
  def type_name=(v); end
end
class Google::Protobuf::FieldDescriptorProto::Type < Protobuf::Enum
end
class Google::Protobuf::FieldDescriptorProto::Label < Protobuf::Enum
end
class Google::Protobuf::OneofDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def name!; end
  def name; end
  def name=(v); end
end
class Google::Protobuf::EnumDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def name!; end
  def name; end
  def name=(v); end
  def options!; end
  def options; end
  def options=(v); end
  def value!; end
  def value; end
  def value=(v); end
end
class Google::Protobuf::EnumValueDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def name!; end
  def name; end
  def name=(v); end
  def number!; end
  def number; end
  def number=(v); end
  def options!; end
  def options; end
  def options=(v); end
end
class Google::Protobuf::ServiceDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def method!; end
  def method; end
  def method=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def options!; end
  def options; end
  def options=(v); end
end
class Google::Protobuf::MethodDescriptorProto < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def client_streaming!; end
  def client_streaming; end
  def client_streaming=(v); end
  def client_streaming?; end
  def input_type!; end
  def input_type; end
  def input_type=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def options!; end
  def options; end
  def options=(v); end
  def output_type!; end
  def output_type; end
  def output_type=(v); end
  def server_streaming!; end
  def server_streaming; end
  def server_streaming=(v); end
  def server_streaming?; end
end
class Google::Protobuf::FileOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def cc_enable_arenas!; end
  def cc_enable_arenas; end
  def cc_enable_arenas=(v); end
  def cc_enable_arenas?; end
  def cc_generic_services!; end
  def cc_generic_services; end
  def cc_generic_services=(v); end
  def cc_generic_services?; end
  def csharp_namespace!; end
  def csharp_namespace; end
  def csharp_namespace=(v); end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def go_package!; end
  def go_package; end
  def go_package=(v); end
  def java_generate_equals_and_hash!; end
  def java_generate_equals_and_hash; end
  def java_generate_equals_and_hash=(v); end
  def java_generate_equals_and_hash?; end
  def java_generic_services!; end
  def java_generic_services; end
  def java_generic_services=(v); end
  def java_generic_services?; end
  def java_multiple_files!; end
  def java_multiple_files; end
  def java_multiple_files=(v); end
  def java_multiple_files?; end
  def java_outer_classname!; end
  def java_outer_classname; end
  def java_outer_classname=(v); end
  def java_package!; end
  def java_package; end
  def java_package=(v); end
  def java_string_check_utf8!; end
  def java_string_check_utf8; end
  def java_string_check_utf8=(v); end
  def java_string_check_utf8?; end
  def javanano_use_deprecated_package!; end
  def javanano_use_deprecated_package; end
  def javanano_use_deprecated_package=(v); end
  def javanano_use_deprecated_package?; end
  def objc_class_prefix!; end
  def objc_class_prefix; end
  def objc_class_prefix=(v); end
  def optimize_for!; end
  def optimize_for; end
  def optimize_for=(v); end
  def py_generic_services!; end
  def py_generic_services; end
  def py_generic_services=(v); end
  def py_generic_services?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::FileOptions::OptimizeMode < Protobuf::Enum
end
class Google::Protobuf::MessageOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def map_entry!; end
  def map_entry; end
  def map_entry=(v); end
  def map_entry?; end
  def message_set_wire_format!; end
  def message_set_wire_format; end
  def message_set_wire_format=(v); end
  def message_set_wire_format?; end
  def no_standard_descriptor_accessor!; end
  def no_standard_descriptor_accessor; end
  def no_standard_descriptor_accessor=(v); end
  def no_standard_descriptor_accessor?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::FieldOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def ctype!; end
  def ctype; end
  def ctype=(v); end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def jstype!; end
  def jstype; end
  def jstype=(v); end
  def lazy!; end
  def lazy; end
  def lazy=(v); end
  def lazy?; end
  def packed!; end
  def packed; end
  def packed=(v); end
  def packed?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
  def weak!; end
  def weak; end
  def weak=(v); end
  def weak?; end
end
class Google::Protobuf::FieldOptions::CType < Protobuf::Enum
end
class Google::Protobuf::FieldOptions::JSType < Protobuf::Enum
end
class Google::Protobuf::EnumOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def allow_alias!; end
  def allow_alias; end
  def allow_alias=(v); end
  def allow_alias?; end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::EnumValueOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::ServiceOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::MethodOptions < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def deprecated!; end
  def deprecated; end
  def deprecated=(v); end
  def deprecated?; end
  def uninterpreted_option!; end
  def uninterpreted_option; end
  def uninterpreted_option=(v); end
end
class Google::Protobuf::UninterpretedOption < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def aggregate_value!; end
  def aggregate_value; end
  def aggregate_value=(v); end
  def double_value!; end
  def double_value; end
  def double_value=(v); end
  def identifier_value!; end
  def identifier_value; end
  def identifier_value=(v); end
  def name!; end
  def name; end
  def name=(v); end
  def negative_int_value!; end
  def negative_int_value; end
  def negative_int_value=(v); end
  def positive_int_value!; end
  def positive_int_value; end
  def positive_int_value=(v); end
  def string_value!; end
  def string_value; end
  def string_value=(v); end
end
class Google::Protobuf::UninterpretedOption::NamePart < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def is_extension!; end
  def is_extension; end
  def is_extension=(v); end
  def is_extension?; end
  def name_part!; end
  def name_part; end
  def name_part=(v); end
end
class Google::Protobuf::SourceCodeInfo < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def location!; end
  def location; end
  def location=(v); end
end
class Google::Protobuf::SourceCodeInfo::Location < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def leading_comments!; end
  def leading_comments; end
  def leading_comments=(v); end
  def leading_detached_comments!; end
  def leading_detached_comments; end
  def leading_detached_comments=(v); end
  def path!; end
  def path; end
  def path=(v); end
  def span!; end
  def span; end
  def span=(v); end
  def trailing_comments!; end
  def trailing_comments; end
  def trailing_comments=(v); end
end
module Google::Protobuf::Compiler
  def self.optionable_descriptor_class; end
  extend Protobuf::Optionable::ClassMethods
  include Protobuf::Optionable
end
class Google::Protobuf::Compiler::CodeGeneratorRequest < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def file_to_generate!; end
  def file_to_generate; end
  def file_to_generate=(v); end
  def parameter!; end
  def parameter; end
  def parameter=(v); end
  def proto_file!; end
  def proto_file; end
  def proto_file=(v); end
end
class Google::Protobuf::Compiler::CodeGeneratorResponse < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def error!; end
  def error; end
  def error=(v); end
  def file!; end
  def file; end
  def file=(v); end
end
class Google::Protobuf::Compiler::CodeGeneratorResponse::File < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def content!; end
  def content; end
  def content=(v); end
  def insertion_point!; end
  def insertion_point; end
  def insertion_point=(v); end
  def name!; end
  def name; end
  def name=(v); end
end
module Protobuf::Socketrpc
  def self.optionable_descriptor_class; end
  extend Protobuf::Optionable::ClassMethods
  include Protobuf::Optionable
end
class Protobuf::Socketrpc::ErrorReason < Protobuf::Enum
end
class Protobuf::Socketrpc::Request < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def caller!; end
  def caller; end
  def caller=(v); end
  def headers!; end
  def headers; end
  def headers=(v); end
  def method_name!; end
  def method_name; end
  def method_name=(v); end
  def request_proto!; end
  def request_proto; end
  def request_proto=(v); end
  def service_name!; end
  def service_name; end
  def service_name=(v); end
end
class Protobuf::Socketrpc::Response < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def callback!; end
  def callback; end
  def callback=(v); end
  def callback?; end
  def error!; end
  def error; end
  def error=(v); end
  def error_reason!; end
  def error_reason; end
  def error_reason=(v); end
  def response_proto!; end
  def response_proto; end
  def response_proto=(v); end
  def server!; end
  def server; end
  def server=(v); end
end
class Protobuf::Socketrpc::Header < Protobuf::Message
  def _protobuf_message_field; end
  def _protobuf_message_unset_required_field_tags; end
  def key!; end
  def key; end
  def key=(v); end
  def value!; end
  def value; end
  def value=(v); end
end
module Protobuf::Rpc
  def self.middleware; end
end
class Protobuf::Rpc::BadRequestData < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::BadRequestProto < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::ServiceNotFound < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::MethodNotFound < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::RpcError < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::RpcFailed < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::InvalidRequestProto < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::BadResponseProto < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::UnkownHost < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Protobuf::Rpc::IOError < Protobuf::Rpc::PbError
  def initialize(message = nil); end
end
class Struct::ClientError < Struct
  def code; end
  def code=(_); end
  def message; end
  def message=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Protobuf::Rpc::PbError < StandardError
  def encode; end
  def error_type; end
  def initialize(message = nil, error_type = nil); end
  def to_response; end
end
class Protobuf::Rpc::Client
  def complete_cb(*args, &block); end
  def connector; end
  def failure_cb(*args, &block); end
  def initialize(options = nil); end
  def log_signature; end
  def method_missing(method_name, *params); end
  def on_complete(&complete_cb); end
  def on_complete=(callable); end
  def on_failure(&failure_cb); end
  def on_failure=(callable); end
  def on_success(&success_cb); end
  def on_success=(callable); end
  def options(*args, &block); end
  def send_request(*args, &block); end
  def success_cb(*args, &block); end
  extend Forwardable
  include Protobuf::Logging
end
class Protobuf::Rpc::RpcMethod
  def initialize(method, request_type, response_type, &options_block); end
  def method; end
  def optionable_descriptor_class; end
  def request_type; end
  def response_type; end
  include Protobuf::Optionable::ClassMethods
end
module Protobuf::Rpc::ServiceFilters
  def self.included(other); end
end
module Protobuf::Rpc::ServiceFilters::ClassMethods
  def after_action(*args); end
  def after_filter(*args); end
  def around_action(*args); end
  def around_filter(*args); end
  def before_action(*args); end
  def before_filter(*args); end
  def define_filter(type, filter, options = nil); end
  def defined_filters; end
  def filter_defined?(type, filter); end
  def filters; end
  def remember_filter(type, filter); end
  def rescue_filters; end
  def rescue_from(*ex_klasses, &block); end
  def set_filters(type, *args); end
end
module Protobuf::Rpc::ServiceFilters::InstanceMethods
  def call_or_send(callable, *args, &block); end
  def filters; end
  def invoke_filter?(rpc_method, filter); end
  def invoke_via_except?(rpc_method, filter); end
  def invoke_via_if?(_rpc_method, filter); end
  def invoke_via_only?(rpc_method, filter); end
  def invoke_via_unless?(_rpc_method, filter); end
  def rescue_filters; end
  def run_around_filters(rpc_method); end
  def run_filters(rpc_method); end
  def run_rescue_filters; end
  def run_unwrapped_filters(unwrapped_filters, rpc_method, stop_on_false_return = nil); end
end
class Protobuf::Rpc::Service
  def call(method_name); end
  def env; end
  def initialize(env); end
  def request; end
  def request_type; end
  def respond_with(candidate); end
  def response; end
  def response_type; end
  def return_from_whence_you_came(candidate); end
  def rpc_failed(message); end
  def rpc_method?(name); end
  def rpcs; end
  def self.client(options = nil); end
  def self.configure(config = nil); end
  def self.host; end
  def self.host=(arg0); end
  def self.implemented_services; end
  def self.located_at(location); end
  def self.optionable_descriptor_class; end
  def self.port; end
  def self.port=(arg0); end
  def self.rpc(method, request_type, response_type, &options_block); end
  def self.rpc_method?(name); end
  def self.rpcs; end
  extend Protobuf::Optionable::ClassMethods
  extend Protobuf::Rpc::ServiceFilters::ClassMethods
  include Protobuf::Logging
  include Protobuf::Optionable
  include Protobuf::Rpc::ServiceFilters
  include Protobuf::Rpc::ServiceFilters::InstanceMethods
end
class Protobuf::Rpc::Buffer
  def <<(data); end
  def check_for_flush; end
  def data; end
  def data=(arg0); end
  def flushed?; end
  def get_data_size; end
  def initialize(mode = nil); end
  def mode; end
  def mode=(mode); end
  def reading?; end
  def set_data(data); end
  def size; end
  def size=(arg0); end
  def write(force_mode = nil); end
  def writing?; end
end
class Protobuf::Rpc::Env < Hash
  def client_host; end
  def client_host=(value); end
  def client_host?; end
  def encoded_request; end
  def encoded_request=(value); end
  def encoded_request?; end
  def encoded_response; end
  def encoded_response=(value); end
  def encoded_response?; end
  def initialize(options = nil); end
  def log_signature; end
  def log_signature=(value); end
  def log_signature?; end
  def method_name; end
  def method_name=(value); end
  def method_name?; end
  def request; end
  def request=(value); end
  def request?; end
  def request_type; end
  def request_type=(value); end
  def request_type?; end
  def request_wrapper; end
  def request_wrapper=(value); end
  def request_wrapper?; end
  def response; end
  def response=(value); end
  def response?; end
  def response_type; end
  def response_type=(value); end
  def response_type?; end
  def rpc_method; end
  def rpc_method=(value); end
  def rpc_method?; end
  def rpc_service; end
  def rpc_service=(value); end
  def rpc_service?; end
  def self.hash_accessor(*names); end
  def server; end
  def server=(value); end
  def server?; end
  def service_name; end
  def service_name=(value); end
  def service_name?; end
  def worker_id; end
  def worker_id=(value); end
  def worker_id?; end
end
module Protobuf::Rpc::Middleware
end
class Protobuf::Rpc::Middleware::ExceptionHandler
  def _call(env); end
  def app; end
  def call(env); end
  def initialize(app); end
  def wrap_exception(exception); end
  include Protobuf::Logging
end
class Protobuf::Rpc::Middleware::Logger
  def _call(env); end
  def call(env); end
  def initialize(app); end
  def instrumenter; end
end
class Protobuf::Rpc::Middleware::Logger::Instrumenter
  def elapsed_time; end
  def env; end
  def flush(env); end
  def rpc; end
  def sizes; end
  def start; end
  def stop; end
  def to_s(env); end
end
class Protobuf::Rpc::Middleware::RequestDecoder
  def _call(env); end
  def app; end
  def call(env); end
  def env; end
  def initialize(app); end
  def log_signature; end
  def method_name; end
  def request; end
  def request_wrapper; end
  def rpc_method; end
  def service; end
  def service_name; end
  include Protobuf::Logging
end
class Protobuf::Rpc::Middleware::ResponseEncoder
  def _call(env); end
  def app; end
  def call(env); end
  def encoded_response; end
  def env; end
  def initialize(app); end
  def log_signature; end
  def response; end
  def validate!(candidate); end
  def wrapped_response; end
  include Protobuf::Logging
end
class Protobuf::Rpc::Middleware::Runner < Middleware::Runner
  def initialize(stack); end
end
class Protobuf::Rpc::ServiceDispatcher
  def _call(env); end
  def call(env); end
  def dispatch_rpc_request; end
  def env; end
  def initialize(_app); end
  def method_name; end
  def rpc_service; end
  def service_name; end
  include Protobuf::Logging
end
module Protobuf::Rpc::Server
  def gc_pause; end
  def handle_request(request_data, env_data = nil); end
  def log_signature; end
end
module Protobuf::Rpc::Socket
end
class Protobuf::Rpc::Socket::Worker
  def initialize(sock, &complete_cb); end
  def log_signature; end
  def read_data; end
  def send_data(data); end
  def socket_writable?; end
  include Protobuf::Logging
  include Protobuf::Rpc::Server
end
class Protobuf::Rpc::Socket::Server
  def backlog; end
  def backlog=(arg0); end
  def cleanup?; end
  def cleanup_threads; end
  def host; end
  def host=(arg0); end
  def initialize(options); end
  def log_signature; end
  def new_worker(socket); end
  def port; end
  def port=(arg0); end
  def run; end
  def running; end
  def running=(arg0); end
  def running?; end
  def stop; end
  def threads; end
  def threshold; end
  def threshold=(arg0); end
  def working; end
  include Protobuf::Logging
end
class Protobuf::Rpc::Stat
  def client; end
  def client=(arg0); end
  def client?; end
  def dispatcher; end
  def dispatcher=(arg0); end
  def elapsed_time; end
  def end_time; end
  def end_time=(arg0); end
  def initialize(mode = nil); end
  def method_name; end
  def method_name=(arg0); end
  def mode; end
  def mode=(arg0); end
  def request_size; end
  def request_size=(arg0); end
  def response_size; end
  def response_size=(arg0); end
  def rpc; end
  def server; end
  def server=(peer); end
  def server?; end
  def service; end
  def service=(arg0); end
  def sizes; end
  def start; end
  def start_time; end
  def start_time=(arg0); end
  def status; end
  def status=(arg0); end
  def status_string; end
  def stop; end
  def stopped?; end
  def to_s; end
  def trace_id; end
end
module Protobuf::Rpc::Connectors
end
class Protobuf::Rpc::Connectors::Base
  def any_callbacks?; end
  def close_connection; end
  def complete; end
  def complete_cb; end
  def complete_cb=(arg0); end
  def data_callback(data); end
  def error; end
  def failure(code, message); end
  def failure_cb; end
  def failure_cb=(arg0); end
  def first_alive_load_balance?; end
  def initialize(options); end
  def initialize_stats; end
  def log_signature; end
  def options; end
  def parse_response; end
  def ping_port; end
  def ping_port_enabled?; end
  def request_bytes; end
  def request_caller; end
  def request_fields; end
  def send_request; end
  def setup_connection; end
  def stats; end
  def stats=(arg0); end
  def succeed(response); end
  def success_cb; end
  def success_cb=(arg0); end
  def timeout; end
  def timeout_wrap(&block); end
  def validate_request_type!; end
  def verify_callbacks; end
  def verify_options!; end
  include Protobuf::Logging
end
class Protobuf::Rpc::Connectors::Socket < Protobuf::Rpc::Connectors::Base
  def close_connection; end
  def connect_to_rpc_server; end
  def error?; end
  def log_signature; end
  def post_init; end
  def read_data; end
  def read_response; end
  def send_data; end
  def send_request; end
  include Protobuf::Logging
end

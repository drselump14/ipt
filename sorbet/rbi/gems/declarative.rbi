# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/declarative/all/declarative.rbi
#
# declarative-0.0.20

module Declarative
end
class Declarative::Definitions < Hash
  def add(name, options = nil, &block); end
  def build_nested(options); end
  def each(&block); end
  def get(name); end
  def initialize(definition_class); end
end
class Declarative::Definitions::Definition
  def [](name); end
  def initialize(name, options = nil); end
  def merge!(hash); end
  def merge(hash); end
end
class Declarative::Defaults
  def call(name, given_options); end
  def handle_array_and_deprecate(variables); end
  def initialize; end
  def merge!(hash = nil, &block); end
  def self.wrap_arrays(variables); end
end
class Declarative::Variables
  def self.Append(appended_array); end
  def self.Merge(merged_hash); end
  def self.merge(defaults, overrides); end
end
class Declarative::Variables::Proc < Proc
end
module Declarative::DeepDup
  def self.call(args); end
  def self.dup_items(arr); end
end
class Declarative::Heritage < Array
  def call!(inheritor, cfg); end
  def call(inheritor, &block); end
  def record(method, *args, &block); end
end
module Declarative::Heritage::DSL
  def heritage; end
end
module Declarative::Heritage::Inherited
  def inherited(subclass); end
end
module Declarative::Heritage::Included
  def included(mod); end
end
module Declarative::Schema
  def self.extended(extender); end
end
module Declarative::Schema::DSL
  def _defaults; end
  def build_definition(name, options = nil, &block); end
  def defaults(options = nil, &block); end
  def definition_class; end
  def definitions; end
  def nested_builder; end
  def property(name, options = nil, &block); end
  def wrap_arrays_from_block(block); end
end
module Declarative::Schema::Feature
  def feature(*mods); end
  def register_feature(mod); end
end

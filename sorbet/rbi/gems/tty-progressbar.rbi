# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tty-progressbar/all/tty-progressbar.rbi
#
# tty-progressbar-0.9.0

module TTY
end
class TTY::ProgressBar
  def advance(progress = nil, tokens = nil); end
  def clear(*args, &block); end
  def clear_line; end
  def complete(*args, &block); end
  def complete?; end
  def current; end
  def current=(value); end
  def finish; end
  def format; end
  def frequency(*args, &block); end
  def hide_cursor(*args, &block); end
  def incomplete(*args, &block); end
  def initialize(format, options = nil); end
  def inspect; end
  def interval(*args, &block); end
  def log(message); end
  def max_columns; end
  def mean_rate(*args, &block); end
  def no_width(*args, &block); end
  def output(*args, &block); end
  def padout(message); end
  def rate(*args, &block); end
  def ratio; end
  def ratio=(value); end
  def render; end
  def reset; end
  def resize(new_width = nil); end
  def start; end
  def start_at; end
  def to_s; end
  def total(*args, &block); end
  def use(*args, &block); end
  def width(*args, &block); end
  def width=(*args, &block); end
  def write(data, clear_first = nil); end
  extend Forwardable
end
class TTY::ProgressBar::Configuration
  def clear; end
  def clear=(arg0); end
  def complete; end
  def complete=(arg0); end
  def frequency; end
  def frequency=(arg0); end
  def hide_cursor; end
  def hide_cursor=(arg0); end
  def incomplete; end
  def incomplete=(arg0); end
  def initialize(options); end
  def interval; end
  def interval=(arg0); end
  def no_width; end
  def no_width=(arg0); end
  def output; end
  def output=(arg0); end
  def total; end
  def total=(value); end
  def width; end
  def width=(arg0); end
end
class TTY::ProgressBar::Converter
  def to_bytes(value); end
  def to_seconds(seconds, precision = nil); end
  def to_time(seconds); end
end
class TTY::ProgressBar::Pipeline
  def decorate(progress, tokenized); end
  def each(&block); end
  def formatters; end
  def initialize(formatters = nil); end
  def use(formatter); end
  include Enumerable
end
class TTY::ProgressBar::Formatter
  def decorate(*args, &block); end
  def initialize(pipeline = nil); end
  def load; end
  def use(*args, &block); end
  extend Forwardable
end
class TTY::ProgressBar::Meter
  def avg_rate; end
  def clear; end
  def initialize(interval); end
  def mean_rate; end
  def rate; end
  def rates; end
  def sample(at, value); end
  def start; end
end
class TTY::ProgressBar::BarFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::CurrentFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::ByteFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::ElapsedFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::EstimatedFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::PercentFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
  def matches?(value); end
end
class TTY::ProgressBar::RateFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::ByteRateFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::MeanRateFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::MeanByteFormatter
  def format(value); end
  def initialize(progress); end
  def matches?(value); end
end
class TTY::ProgressBar::TotalFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
  def matches?(value); end
end
class TTY::ProgressBar::TotalByteFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
  def matches?(value); end
end

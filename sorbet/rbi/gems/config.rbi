# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/config/all/config.rbi
#
# config-3.1.0

module Config
  def self.load_and_set_settings(*files); end
  def self.load_files(*files); end
  def self.local_setting_files(config_root, env); end
  def self.reload!; end
  def self.setting_files(config_root, env); end
  def self.setup; end
  extend Anonymous_Config_Configuration_5
  extend Config::Validation::Schema
end
module Config::Validation
end
class Config::Validation::Error < StandardError
  def self.format(v_res); end
end
module Config::Validation::Validate
  def validate!; end
  def validate_using!(validator); end
end
class Config::Options < OpenStruct
  def [](param); end
  def []=(param, value); end
  def __convert(h); end
  def add_source!(source); end
  def as_json(options = nil); end
  def collect; end
  def count; end
  def descend_array(array); end
  def each(*args, &block); end
  def empty?; end
  def exit!; end
  def has_key?(key); end
  def key?(key); end
  def keys; end
  def load!; end
  def max; end
  def merge!(hash); end
  def method_missing(method_name, *args); end
  def min; end
  def prepend_source!(source); end
  def reload!; end
  def reload_from_files(*files); end
  def respond_to_missing?(*args); end
  def select; end
  def test; end
  def to_h; end
  def to_hash; end
  def to_json(*args); end
  def zip; end
  include Config::Validation::Validate
  include Enumerable
end
class Config::Configuration < Module
  def define_reader(name, default); end
  def define_writer(name); end
  def initialize(**attributes); end
end
module Config::Sources
end
class Config::Sources::YAMLSource
  def evaluate_erb; end
  def initialize(path, evaluate_erb: nil); end
  def load; end
  def path; end
  def path=(arg0); end
end
class Config::Sources::HashSource
  def hash; end
  def hash=(arg0); end
  def initialize(hash); end
  def load; end
end
class Config::Sources::EnvSource
  def __value(v); end
  def converter; end
  def initialize(env, prefix: nil, separator: nil, converter: nil, parse_values: nil); end
  def load; end
  def parse_values; end
  def prefix; end
  def separator; end
end
module Config::Validation::Schema
  def schema(&block); end
  def schema=(value); end
end
module Anonymous_Config_Configuration_5
  def const_name; end
  def const_name=(value); end
  def env_converter; end
  def env_converter=(value); end
  def env_parse_values; end
  def env_parse_values=(value); end
  def env_prefix; end
  def env_prefix=(value); end
  def env_separator; end
  def env_separator=(value); end
  def evaluate_erb_in_yaml; end
  def evaluate_erb_in_yaml=(value); end
  def fail_on_missing; end
  def fail_on_missing=(value); end
  def knockout_prefix; end
  def knockout_prefix=(value); end
  def merge_hash_arrays; end
  def merge_hash_arrays=(value); end
  def merge_nil_values; end
  def merge_nil_values=(value); end
  def overwrite_arrays; end
  def overwrite_arrays=(value); end
  def use_env; end
  def use_env=(value); end
  def validation_contract; end
  def validation_contract=(value); end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cucumber-wire/all/cucumber-wire.rbi
#
# cucumber-wire-5.0.0

module Cucumber
end
module Cucumber::Wire
end
class Cucumber::Wire::RequestHandler
  def execute(request_params = nil); end
  def handle_fail(params); end
  def handle_success(params); end
  def initialize(connection, registry = nil); end
  def underscore(camel_cased_word); end
end
class Cucumber::Wire::StepArgument
  def group; end
  def initialize(offset, val); end
  def offset; end
  def value(_current_world); end
end
module Cucumber::Wire::Protocol
  def begin_scenario(scenario); end
  def diff_failed; end
  def diff_ok; end
  def end_scenario(scenario); end
  def invoke(step_definition_id, args); end
  def snippet_text(step_keyword, step_name, multiline_arg_class_name); end
  def step_matches(name_to_match, registry); end
end
module Cucumber::Wire::Protocol::Requests
end
class Cucumber::Wire::Protocol::Requests::StepMatches < Cucumber::Wire::RequestHandler
  def create_step_match(raw_step_match); end
  def execute(name_to_match); end
  def handle_step_matches(params); end
  def handle_success(params); end
  def step_match(step_definition, step_args); end
end
class Cucumber::Wire::Protocol::Requests::SnippetText < Cucumber::Wire::RequestHandler
  def execute(step_keyword, step_name, multiline_arg_class_name); end
  def handle_snippet_text(snippet_text); end
  def handle_success(snippet_text); end
end
class Cucumber::Wire::Protocol::Requests::Invoke < Cucumber::Wire::RequestHandler
  def execute(step_definition_id, args); end
  def handle_diff!(tables); end
  def handle_diff(tables); end
  def handle_pending(message); end
  def handle_step_failed(params); end
  def table(data); end
end
class Cucumber::Wire::Protocol::Requests::DiffFailed < Cucumber::Wire::RequestHandler
  def handle_step_failed(params); end
end
class Cucumber::Wire::Protocol::Requests::DiffOk < Cucumber::Wire::RequestHandler
  def handle_step_failed(params); end
end
class Cucumber::Wire::Protocol::Requests::HookRequestHandler < Cucumber::Wire::RequestHandler
  def clean_tag_names(tags); end
  def execute(test_case); end
  def request_params(test_case); end
end
class Cucumber::Wire::Protocol::Requests::BeginScenario < Cucumber::Wire::Protocol::Requests::HookRequestHandler
end
class Cucumber::Wire::Protocol::Requests::EndScenario < Cucumber::Wire::Protocol::Requests::HookRequestHandler
end
class Cucumber::Wire::Exception < StandardError
  def backtrace; end
  def initialize(args, config); end
end
module Cucumber::Wire::Exception::CanSetName
  def exception_name=(arg0); end
  def to_s; end
end
class Cucumber::Wire::DataPacket
  def handle_with(handler); end
  def initialize(message, params = nil); end
  def message; end
  def params; end
  def self.parse(raw); end
  def to_json; end
end
class Cucumber::Wire::Connection
  def call_remote(request_handler, message, params); end
  def exception(params); end
  def fetch_data_from_socket(timeout); end
  def initialize(config); end
  def send_data_to_socket(data); end
  def socket; end
  include Cucumber::Wire::Protocol
end
class Cucumber::Wire::Connection::ConnectionError < StandardError
end
class Cucumber::Wire::Configuration
  def host; end
  def initialize(args); end
  def port; end
  def self.from_file(wire_file); end
  def timeout(message = nil); end
  def to_s; end
  def unix; end
end
class Cucumber::Wire::StepDefinition
  def expression; end
  def initialize(connection, data, registry); end
  def invoke(args); end
  def location; end
  def regexp_source; end
  def registry; end
end
module Cucumber::Wire::Snippet
end
class Cucumber::Wire::Snippet::Generator
  def call(code_keyword, step_name, multiline_arg, snippet_type); end
  def initialize(connections); end
end
class Cucumber::Wire::Snippet::Generator::MultilineArgClassName
  def data_table(*arg0); end
  def doc_string(*arg0); end
  def initialize(arg); end
  def to_s; end
end
class Cucumber::Wire::Connections
  def begin_scenario(test_case); end
  def connections; end
  def end_scenario(test_case); end
  def find_match(test_step); end
  def initialize(connections, configuration, registry); end
  def snippets(code_keyword, step_name, multiline_arg_class_name); end
  def step_matches(step_name); end
end
class Anonymous_Object_50
  def connections; end
  def done; end
  def initialize(*args); end
  def receiver; end
  def test_case(test_case); end
  def with_receiver(new_receiver); end
end
class Cucumber::Wire::AddHooksFilter < Anonymous_Object_50
  def after_hook(test_case); end
  def before_hook(test_case); end
  def id_generator; end
  def test_case(test_case); end
end
class Cucumber::Wire::Plugin
  def config; end
  def create_connection(wire_file); end
  def initialize(config, registry); end
  def install; end
  def registry; end
  def wire_files; end
end

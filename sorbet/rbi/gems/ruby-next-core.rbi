# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby-next-core/all/ruby-next-core.rbi
#
# ruby-next-core-0.12.0

module RubyNext
  def self.current_ruby_version; end
  def self.debug_enabled; end
  def self.debug_enabled=(val); end
  def self.debug_filter; end
  def self.debug_source(source, filepath = nil); end
  def self.next_ruby_version(version = nil); end
  def self.silence_warnings; end
  def self.silence_warnings=(arg0); end
  def self.warn(msg); end
end
module RubyNext::Utils
  def refine_modules?; end
  def resolve_feature_path(feature); end
  def self.refine_modules?; end
  def self.resolve_feature_path(feature); end
  def self.source_with_lines(source, path); end
  def source_with_lines(source, path); end
end
module RubyNext::Core
  def self.backports?; end
  def self.core_ext?; end
  def self.inject!(contents); end
  def self.patch(**, &&); end
  def self.patches; end
  def self.refine?; end
  def self.strategy; end
  def self.strategy=(val); end
end
class RubyNext::Core::Patch
  def body; end
  def build_location(trace_locations); end
  def build_module_name; end
  def core_ext; end
  def core_ext?; end
  def initialize(mod = nil, method:, version:, name: nil, supported: nil, native: nil, location: nil, refineable: nil, core_ext: nil, singleton: nil); end
  def location; end
  def method_name; end
  def mod; end
  def name; end
  def native; end
  def native?; end
  def native_location?(location); end
  def prepend?; end
  def refineables; end
  def singleton; end
  def singleton?; end
  def supported; end
  def supported?; end
  def to_module; end
  def version; end
end
class RubyNext::Core::Patches
  def <<(patch); end
  def extensions; end
  def initialize; end
  def refined; end
end
module RubyNext::Language
  def self.runtime?; end
  def self.setup_gem_load_path(lib_dir = nil, rbnext_dir: nil, transpile: nil); end
end
module RubyNext::Language::GemTranspiler
  def self.maybe_transpile(root_dir, lib_dir, target_dir); end
end
